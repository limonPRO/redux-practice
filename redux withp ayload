//State - count:0
//Action- increment ,decrement, reset
//reducer
//store
const { createStore } = require("redux");

const INCREMENT = "INCREMENT";
const DECREMENT = "DECREMENT";
const RESET = "RESET";
const INCREMENT_BY_VALUE = "INCREMENT_BY_VALUE";
const ADD_USER="ADD_USER"

const initialState = {
 users:['limon'],
  count: 1,
};

const incrementCounterAction = () => {
  return {
    type: INCREMENT,
  };
};

const decrementCounterAction = () => {
  return {
    type: DECREMENT,
  };
};
const resetCounterAction = () => {
  return {
    type: RESET,
  };
};
const incrementCounterByValue = (value) => {
    return {
      type: INCREMENT_BY_VALUE,
      payload:value,
    };
  };
  const addUser = (user) => {
    return {
      type:ADD_USER,
      payload:user
    };
  };

//CREATING REDUCER

const userReducer = (state = initialState, action) => {
  switch (action.type) {
    case INCREMENT:
      return {
        ...state,
        count: state.count + 1,
      };
    case DECREMENT:
      return {
        ...state,
        count: state.count - 1,
      };
      case RESET:
        return {
          ...state,
          count: 0,
        };
        case INCREMENT_BY_VALUE:
            return {
              ...state,
              count:state.count + action.payload
            };
            case ADD_USER:
            return {
                users:[...state.users,action.payload],
              count:state.count + 1
            };
    default:
      state;
  }
};

//store

const store = createStore(userReducer);

store.subscribe(() => {
  console.log(store.getState());
});

// store.dispatch(incrementCounterAction());
// store.dispatch(incrementCounterAction());
// store.dispatch(incrementCounterAction());
// store.dispatch(resetCounterAction());
// store.dispatch(incrementCounterAction());
// store.dispatch(decrementCounterAction());
// store.dispatch(incrementCounterByValue(5));
store.dispatch(addUser("khushi"));
store.dispatch(addUser("Aysha"));

